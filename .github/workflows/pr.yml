name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "❌ Code is not formatted. Run 'make fmt' to fix."
          echo "Files that need formatting:"
          gofmt -l .
          exit 1
        fi
        echo "✅ Code is properly formatted"

    - name: Run go vet
      run: go vet ./...

    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -func=coverage.out -o coverage.txt

    - name: Calculate coverage
      id: coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"

    - name: Generate coverage badge color
      id: badge
      run: |
        COVERAGE=${{ steps.coverage.outputs.coverage }}
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          echo "color=brightgreen" >> $GITHUB_OUTPUT
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          echo "color=green" >> $GITHUB_OUTPUT
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          echo "color=yellow" >> $GITHUB_OUTPUT
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          echo "color=orange" >> $GITHUB_OUTPUT
        else
          echo "color=red" >> $GITHUB_OUTPUT
        fi

    - name: Comment PR with coverage
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage }}';
          const color = '${{ steps.badge.outputs.color }}';

          const body = `## 📊 Test Coverage Report

          ![Coverage](https://img.shields.io/badge/coverage-${coverage}%25-${color})

          <details>
          <summary>📈 Coverage Details</summary>

          \`\`\`
          ${require('fs').readFileSync('coverage.txt', 'utf8')}
          \`\`\`

          </details>

          ---
          *Coverage threshold: 80%*
          ${parseFloat(coverage) >= 80 ? '✅ Coverage meets threshold!' : '⚠️ Coverage below threshold'}`;

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Test Coverage Report')
          );

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

    - name: Check coverage threshold
      run: |
        COVERAGE=${{ steps.coverage.outputs.coverage }}
        THRESHOLD=80
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "⚠️  Coverage ($COVERAGE%) is below threshold ($THRESHOLD%)"
          echo "Please add more tests to improve coverage"
          exit 1
        fi
        echo "✅ Coverage ($COVERAGE%) meets threshold ($THRESHOLD%)"

  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt

    - name: Comment PR with benchmarks
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const benchmark = fs.readFileSync('benchmark.txt', 'utf8');

          const body = `## ⚡ Benchmark Results

          <details>
          <summary>View benchmark results</summary>

          \`\`\`
          ${benchmark}
          \`\`\`

          </details>`;

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('Benchmark Results')
          );

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
