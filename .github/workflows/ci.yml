name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22', '1.23']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Install goimports
      if: runner.os != 'Windows'
      run: go install golang.org/x/tools/cmd/goimports@latest

    - name: Check formatting and imports
      if: runner.os != 'Windows'
      run: |
        GOBIN=$(go env GOPATH)/bin
        if [ -n "$($GOBIN/goimports -l -local github.com/mstephenholl/go-solar .)" ]; then
          echo "Code is not formatted or imports need organization:"
          $GOBIN/goimports -d -local github.com/mstephenholl/go-solar .
          exit 1
        fi

    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: go test -v -race -timeout 5m -coverprofile=coverage.out -covermode=atomic ./...

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: go test -v -race -timeout 5m -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: './...'

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Build
      run: go build -v ./...

    - name: Run benchmarks
      run: go test -bench=. -benchmem -run=^$ ./...
