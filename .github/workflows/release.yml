name: Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write

jobs:
  release:
    name: Create Automated Release
    runs-on: ubuntu-latest
    # Only run if CI passes
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Generate version tag
      id: version
      run: |
        # CalVer format: YYYY.MM.MICRO
        # Get current year and month (UTC)
        YEAR=$(date -u +"%Y")
        MONTH=$(date -u +"%m")

        # Find existing tags for this year and month
        YEAR_MONTH="${YEAR}.${MONTH}"

        # Get all tags matching YYYY.MM.* pattern and extract MICRO versions
        EXISTING_TAGS=$(git tag -l "v${YEAR_MONTH}.*" 2>/dev/null | sed "s/^v${YEAR_MONTH}\.//" | grep -E '^[0-9]+$' | sort -n)

        # Find the highest MICRO version, default to -1 if none exist
        if [ -z "$EXISTING_TAGS" ] || [ $(echo "$EXISTING_TAGS" | wc -l) -eq 0 ]; then
          LAST_MICRO=-1
          echo "No existing tags found for ${YEAR_MONTH}, starting at 0"
        else
          LAST_MICRO=$(echo "$EXISTING_TAGS" | tail -n 1)
          echo "Found existing tags, last MICRO version: ${LAST_MICRO}"
        fi

        # Increment MICRO version
        MICRO=$((LAST_MICRO + 1))

        # Create CalVer version: YYYY.MM.MICRO
        VERSION="${YEAR}.${MONTH}.${MICRO}"

        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "year=${YEAR}" >> $GITHUB_OUTPUT
        echo "month=${MONTH}" >> $GITHUB_OUTPUT
        echo "micro=${MICRO}" >> $GITHUB_OUTPUT
        echo "Generated CalVer version: v${VERSION}"

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "⚠️ Tag v${{ steps.version.outputs.version }} already exists, skipping release"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✅ Tag v${{ steps.version.outputs.version }} does not exist, will create release"
        fi

    - name: Get previous tag
      id: previous_tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          echo "previous_tag=" >> $GITHUB_OUTPUT
          echo "is_first_release=true" >> $GITHUB_OUTPUT
          echo "📦 No previous tag found - this is the first release"
        else
          echo "previous_tag=${PREV_TAG}" >> $GITHUB_OUTPUT
          echo "is_first_release=false" >> $GITHUB_OUTPUT
          echo "📋 Previous tag: ${PREV_TAG}"
        fi

    - name: Generate changelog
      id: changelog
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "📝 Generating changelog..."

        RELEASE_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        VERSION="v${{ steps.version.outputs.version }}"

        if [ "${{ steps.previous_tag.outputs.is_first_release }}" = "true" ]; then
          # First release - include all commits
          COMMIT_RANGE=""
          CHANGELOG_HEADER="Initial Release"
          PREV_TAG_INFO=""
        else
          # Subsequent release - commits since last tag
          PREV_TAG="${{ steps.previous_tag.outputs.previous_tag }}"
          COMMIT_RANGE="${PREV_TAG}..HEAD"
          CHANGELOG_HEADER="Changes since ${PREV_TAG}"
          PREV_TAG_INFO="**Previous Release:** ${PREV_TAG}"
        fi

        # Get all commits (categorized by conventional commit prefixes)
        ALL_COMMITS=$(git log ${COMMIT_RANGE} --pretty=format:"%s (%h)" --no-merges)

        # Categorize commits
        FEATURES=$(echo "${ALL_COMMITS}" | grep -E "^feat(\(.*\))?:" || true)
        FIXES=$(echo "${ALL_COMMITS}" | grep -E "^fix(\(.*\))?:" || true)
        PERF=$(echo "${ALL_COMMITS}" | grep -E "^perf(\(.*\))?:" || true)
        REFACTOR=$(echo "${ALL_COMMITS}" | grep -E "^refactor(\(.*\))?:" || true)
        DOCS=$(echo "${ALL_COMMITS}" | grep -E "^docs(\(.*\))?:" || true)
        TESTS=$(echo "${ALL_COMMITS}" | grep -E "^test(\(.*\))?:" || true)
        CHORE=$(echo "${ALL_COMMITS}" | grep -E "^chore(\(.*\))?:" || true)
        ENHANCEMENT=$(echo "${ALL_COMMITS}" | grep -E "^enhancement(\(.*\))?:" || true)
        OTHER=$(echo "${ALL_COMMITS}" | grep -vE "^(feat|fix|perf|refactor|docs|test|chore|enhancement)(\(.*\))?:" || true)

        # Count total commits
        COMMIT_COUNT=$(echo "${ALL_COMMITS}" | wc -l | tr -d ' ')

        # Build categorized changelog
        CHANGELOG_BODY=""

        if [ -n "${FEATURES}" ]; then
          CHANGELOG_BODY="${CHANGELOG_BODY}### ✨ Features\n\n${FEATURES}\n\n"
        fi

        if [ -n "${ENHANCEMENT}" ]; then
          CHANGELOG_BODY="${CHANGELOG_BODY}### 🚀 Enhancements\n\n${ENHANCEMENT}\n\n"
        fi

        if [ -n "${FIXES}" ]; then
          CHANGELOG_BODY="${CHANGELOG_BODY}### 🐛 Bug Fixes\n\n${FIXES}\n\n"
        fi

        if [ -n "${PERF}" ]; then
          CHANGELOG_BODY="${CHANGELOG_BODY}### ⚡ Performance Improvements\n\n${PERF}\n\n"
        fi

        if [ -n "${REFACTOR}" ]; then
          CHANGELOG_BODY="${CHANGELOG_BODY}### ♻️ Refactors\n\n${REFACTOR}\n\n"
        fi

        if [ -n "${DOCS}" ]; then
          CHANGELOG_BODY="${CHANGELOG_BODY}### 📚 Documentation\n\n${DOCS}\n\n"
        fi

        if [ -n "${TESTS}" ]; then
          CHANGELOG_BODY="${CHANGELOG_BODY}### 🧪 Tests\n\n${TESTS}\n\n"
        fi

        if [ -n "${CHORE}" ]; then
          CHANGELOG_BODY="${CHANGELOG_BODY}### 🔧 Maintenance\n\n${CHORE}\n\n"
        fi

        if [ -n "${OTHER}" ]; then
          CHANGELOG_BODY="${CHANGELOG_BODY}### 📝 Other Changes\n\n${OTHER}\n\n"
        fi

        # If no categorized commits, show all commits
        if [ -z "${CHANGELOG_BODY}" ]; then
          CHANGELOG_BODY="### Changes\n\n${ALL_COMMITS}\n\n"
        fi

        # Create changelog with proper formatting
        cat > changelog.md << EOF
        ## ${CHANGELOG_HEADER}

        **Release Date:** ${RELEASE_DATE}
        **Commit:** \`${{ github.sha }}\`
        ${PREV_TAG_INFO}

        ${CHANGELOG_BODY}

        ---

        ### 📦 Installation

        \`\`\`bash
        go get github.com/mstephenholl/go-solar@${VERSION}
        \`\`\`

        ### 📖 Documentation

        - [Package Documentation](https://pkg.go.dev/github.com/mstephenholl/go-solar@${VERSION})
        - [GitHub Repository](https://github.com/mstephenholl/go-solar)
        - [Full Changelog](https://github.com/mstephenholl/go-solar/compare/${{ steps.previous_tag.outputs.previous_tag }}...${VERSION})

        ### ⚙️ Requirements

        - Go 1.21 or later
        EOF

        echo "✅ Changelog generated successfully"
        cat changelog.md

    - name: Run tests
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🧪 Running tests..."
        go test -v -race -timeout 5m -coverprofile=coverage.out -covermode=atomic ./...

    - name: Run linter
      if: steps.check_tag.outputs.exists == 'false'
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

    - name: Build
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🔨 Building..."
        go build -v ./...

    - name: Create Git tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
        git push origin "v${{ steps.version.outputs.version }}"
        echo "🏷️ Tag v${{ steps.version.outputs.version }} created and pushed"

    - name: Create GitHub Release
      if: steps.check_tag.outputs.exists == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body_path: changelog.md
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload coverage artifact
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-v${{ steps.version.outputs.version }}
        path: coverage.out
        retention-days: 30

    - name: Summary
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "## ✅ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Release Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** v${{ steps.version.outputs.version }} (CalVer: YYYY.MM.MICRO)" >> $GITHUB_STEP_SUMMARY
        echo "- **Year:** ${{ steps.version.outputs.year }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Month:** ${{ steps.version.outputs.month }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Micro:** ${{ steps.version.outputs.micro }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Tag:** ${{ steps.previous_tag.outputs.previous_tag || 'None (first release)' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "go get github.com/mstephenholl/go-solar@v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Links" >> $GITHUB_STEP_SUMMARY
        echo "- [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Documentation](https://pkg.go.dev/github.com/mstephenholl/go-solar@v${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY

    - name: Skip message
      if: steps.check_tag.outputs.exists == 'true'
      run: |
        echo "## ℹ️ Release Skipped" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Tag v${{ steps.version.outputs.version }} already exists for this commit." >> $GITHUB_STEP_SUMMARY
        echo "No new release was created." >> $GITHUB_STEP_SUMMARY
